service: serverlessproject

plugins:
    - serverless-offline

provider:
    name: aws
    runtime: nodejs12.x
    profile: serverlessUser
    stage: dev
    region: eu-west-2
    environment:
        tableName: ${self:custom.tableName}
        tableName2: ${self:custom.tableName2}
        tableName3: ${self:custom.tableName3}
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:*
              - sns:setSMSAttributes
              - sns:Publish
              - ses:*
          Resource: "*"
    apiGateway:
        apiKeys:
            - FirstApiKey

custom:
    tableName: gigData
    tableName2: venueData
    tableName3: comments

functions:
    getAllGigData:
        handler: lambdas/endpoints/getAllGigData.handler
        events:
            - http:
                  path: /get-gig-data
                  method: GET
                  cors: true
                  private: true
    getGigData:
        handler: lambdas/endpoints/getGigData.handler
        events:
            - http:
                  path: /get-gig-data/{id}
                  method: GET
                  cors: true
                  private: true
    getAllVenueData:
        handler: lambdas/endpoints/getAllVenueData.handler
        events:
            - http:
                  path: /get-venue-data
                  method: GET
                  cors: true
                  private: true
    getVenueData:
        handler: lambdas/endpoints/getVenueData.handler
        events:
            - http:
                  path: /get-venue-data/{id}
                  method: GET
                  cors: true
                  private: true
    getCommentData:
        handler: lambdas/endpoints/getCommentData.handler
        events:
            - http:
                  path: /get-comment-data/{id}
                  method: GET
                  cors: true
                  private: true
    createGigData:
        handler: lambdas/endpoints/createGigData.handler
        events:
            - http:
                  path: /create-gig-data/{id}
                  method: POST
                  cors: true
                  private: true
    createComments:
        handler: lambdas/endpoints/createComments.handler
        events:
            - http:
                  path: /create-comment/{id}
                  method: POST
                  cors: true
                  private: true
    updateGigData:
        handler: lambdas/endpoints/patchGigData.handler
        events:
            - http:
                  path: /patch-gig-data/{id}
                  method: PUT
                  cors: true
                  private: true
    queryGigs:
        handler: lambdas/endpoints/queryGigs.handler
        events:
            - http:
                  path: /query-gigs/{venue_id}
                  method: GET
                  cors: true
                  private: true
    queryGenre:
        handler: lambdas/endpoints/queryGenre.handler
        events:
            - http:
                  path: /query-genre/{genre}
                  method: GET
                  cors: true
                  private: true
    queryComments:
        handler: lambdas/endpoints/queryComments.handler
        events:
            - http:
                  path: /query-comments/{venue_number}
                  method: GET
                  cors: true
                  private: true
    deleteComments:
        handler: lambdas/endpoints/deleteComments.handler
        events:
            - http:
                  path: /delete-comments/{id}
                  method: DELETE
                  cors: true
                  private: true
    sendSMS:
        handler: lambdas/endpoints/sendSMS.handler
        events:
            - http:
                  path: /send-sms
                  method: POST
                  cors: true
                  private: true
    sendEmail:
        handler: lambdas/endpoints/sendEmail.handler
        events:
            - http:
                  path: send-email
                  method: POST
                  cors: true
                  private: true
    seedTable:
        handler: lambdas/endpoints/seedingTable.handler
        events:
            - http:
                  path: /seed/{tableNametype}
                  method: Get
                  # cors: true
                  # private: true

resources:
    Resources:
        MyDynamoDbTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:custom.tableName}
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                    - AttributeName: venue_id
                      AttributeType: S
                    - AttributeName: genre
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST

                GlobalSecondaryIndexes:
                    - IndexName: venue_id-index
                      KeySchema:
                          - AttributeName: venue_id
                            KeyType: HASH
                      Projection:
                          ProjectionType: ALL
                    - IndexName: genre-index
                      KeySchema:
                          - AttributeName: genre
                            KeyType: HASH
                      Projection:
                          ProjectionType: ALL

        MyDynamoDbTable2:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:custom.tableName2}
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST

        MyDynamoDbTable3:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:custom.tableName3}
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                    - AttributeName: venue_number
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST

                GlobalSecondaryIndexes:
                    - IndexName: venue_number-index
                      KeySchema:
                          - AttributeName: venue_number
                            KeyType: HASH
                      Projection:
                          ProjectionType: ALL
